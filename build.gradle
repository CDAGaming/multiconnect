buildscript {
	repositories {
		mavenCentral()
		maven {
			name = 'forge'
			url = 'https://files.minecraftforge.net/maven'
		}
		maven {
			name = 'SpongePowered'
			url = 'https://repo.spongepowered.org/maven'
		}
		maven {
			url = "https://plugins.gradle.org/m2/"
		}
	}

	dependencies {
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
		classpath "gradle.plugin.com.github.breadmoirai:github-release:2.0.1"
		classpath "net.minecraftforge.gradle:ForgeGradle:${project.forgeGradleVersion}"
		classpath "org.spongepowered:mixingradle:${project.mixinGradleVersion}"
	}
}

apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.breadmoirai.github-release'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.spongepowered.mixin'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
	api
}

minecraft {
	// The mappings can be changed at any time, and must be in the following format.
	// snapshot_YYYYMMDD   Snapshot are built nightly.
	// stable_#            Stables are built at the discretion of the MCP team.
	// Use non-default mappings at your own risk. they may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'snapshot', version: "${mappingsVer}"
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	// accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')
			source sourceSets.main
		}

		server {
			workingDirectory project.file('run')
			source sourceSets.main
		}
	}
}

allprojects {
	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xmaxerrs" << "3000"
		}
	}
}

mixin {
	add sourceSets.main, "multiconnect-refmap.json"
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task apiJar(type: Jar, dependsOn: apiClasses) {
	classifier = 'api-dev'
	from sourceSets.api.output
	from 'LICENSE'
}

jar {
	from "LICENSE"
	from sourceSets.api.output

	manifest.attributes(
			"MixinConfigs": 'multiconnect.mixins.json',
			"tweakClass": 'org.spongepowered.asm.launch.MixinTweaker',
			"TweakOrder": 0,
			"MixinConnector": 'net.earthcomputer.multiconnect.api.Initializer',
			"Manifest-Version": 1.0
	)
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spongepowered.org/maven/' }
	maven { url 'https://libraries.minecraft.net/' }
	maven { url 'https://www.dimdev.org/maven/' }
	maven { url 'https://www.jitpack.io' }
}

dependencies {
	//to change the versions see the gradle.properties file
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

	compile('org.spongepowered:mixin:0.8.+') {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
		exclude module: 'gson'
		exclude module: 'commons-io'
		exclude module: 'log4j-core'
	}
	sourceSets.api.compileClasspath += files({sourceSets.main.compileClasspath.toList()})

	compile sourceSets.api.output
	compile files(apiJar.archivePath)
}

project.ext.credentials = new Properties()
try {
	project.ext.credentials.load(new FileReader(file('credentials.properties')))
} catch (IOException ignore) {
}
def isBeta = version.contains 'pre'
def changes = file('changelog.txt')
changes = changes.exists() ? changes.getText('UTF-8') : ''

// configure the maven publication
/*publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy jar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			artifact(remapApiJar) {
				builtBy remapApiJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		maven {
			url 'https://api.bintray.com/maven/earthcomputer/mods/multiconnect/'
			credentials {
				username = project.ext.credentials == null ? 'foo' : project.ext.credentials['bintrayUser']
				password = project.ext.credentials == null ? 'bar' : project.ext.credentials['bintrayPass']
			}
		}
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}*/

curseforge {
	project {
		apiKey = project.ext.credentials == null ? 'baz' :  project.ext.credentials['curseForgeKey']
		id = '336018'
		changelog = changes
		releaseType = isBeta ? 'beta' : 'release'
		addGameVersion project.minecraftVersion
		addGameVersion 'Forge'
		mainArtifact jar.archivePath
		afterEvaluate {
			uploadTask.dependsOn jar
		}
	}

	options {
		forgeGradleIntegration = false
	}

}

githubRelease {
	token(project.ext.credentials == null ? 'derp' : project.ext.credentials['githubKey'].toString())
	owner 'Earthcomputer'
	repo 'multiconnect'
	tagName("v$version")
	releaseName("Version $version for Minecraft ${project.minecraftVersion}")
	body changes
	prerelease isBeta
	releaseAssets jar.archivePath
}
tasks.getByName('githubRelease').dependsOn jar

task releaseAll {
	group = 'publishing'
	dependsOn publish
	dependsOn tasks.getByName('curseforge')
	dependsOn tasks.getByName('githubRelease')
}

apply from: 'setupRealMcAccount.gradle'
